import { useEffect, useRef, useState } from "react";
import { useRouter } from "next/router";
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import io from "socket.io-client";

interface RoomState {
  isConnected: boolean;
  hasError: boolean;
  errorMessage: string | null;
  isLocalStreamReady: boolean;
  isRemoteStreamReady: boolean;
}

const initialState: RoomState = {
  isConnected: false,
  hasError: false,
  errorMessage: null,
  isLocalStreamReady: false,
  isRemoteStreamReady: false,
};

interface MediaStreamConstraints {
  video: boolean;
  audio: boolean;
}

let socket;
let peerConnection;
const config = {
  iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
};

interface RoomState {
  isConnected: boolean;
  hasError: boolean;
  errorMessage: string | null;
  isLocalStreamReady: boolean;
  isRemoteStreamReady: boolean;
}

const initialState: RoomState = {
  isConnected: false,
  hasError: false,
  errorMessage: null,
  isLocalStreamReady: false,
  isRemoteStreamReady: false,
};

export default function RoomPage() {
  const { roomId } = useRouter().query;
  const localVideo = useRef(null);
  const remoteVideo = useRef(null);
  const localStream = useRef(null);
  const [roomState, setRoomState] = useState(initialState);

  useEffect(() => {
    if (!roomId) return;

    socket = io("http://localhost:8001"); // 

    // B1: Get local media
    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
      .then((stream) => {
        localStream.current = stream;
        if (localVideo.current) {
          localVideo.current.srcObject = stream;
        }
        setRoomState(prev => ({
          ...prev,
          isLocalStreamReady: true
        }));
      })
      .catch((error) => {
        setRoomState(prev => ({
          ...prev,
          hasError: true,
          errorMessage: 'Không thể truy cập camera/micro: ' + error.message
        }));
        toast.error('Không thể truy cập camera/micro');
      });

    socket.emit("join", roomId);
  }, [roomId]);

  const createPeer = async (isInitiator) => {
    const pc = new RTCPeerConnection(config);

    pc.onicecandidate = (e) => {
      if (e.candidate) {
        socket.send(JSON.stringify({ type: "ice", candidate: e.candidate }));
      }
    };

    pc.ontrack = (e) => {
      if (remoteVideo.current) {
        remoteVideo.current.srcObject = e.streams[0];
      }
      setRoomState(prev => ({
        ...prev,
        isRemoteStreamReady: true
      }));
    };

    if (isInitiator) {
      localStream.current.getTracks().forEach((track) => {
        pc.addTrack(track, localStream.current);
      });
    }

    return pc;
  };

  socket.onmessage = async (msg) => {
    try {
      const data = JSON.parse(msg.data);

      if (data.type === "offer") {
        await createPeer(false);
        await peerConnection.setRemoteDescription(data.offer);
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        socket.send(JSON.stringify({ type: "answer", answer }));
        setRoomState(prev => ({
          ...prev,
          isConnected: true
        }));
      }

      if (data.type === "answer") {
        await peerConnection.setRemoteDescription(data.answer);
        setRoomState(prev => ({
          ...prev,
          isConnected: true
        }));
      }

      if (data.type === "ice") {
        if (data.candidate) {
          await peerConnection.addIceCandidate(data.candidate);
        }
      }
    } catch (error) {
      setRoomState(prev => ({
        ...prev,
        hasError: true,
        errorMessage: 'Lỗi kết nối: ' + error.message
      }));
      toast.error('Lỗi kết nối: ' + error.message);
    }
  };

  socket.onopen = async () => {
    try {
      // Tạo peer nếu là người đầu tiên
      await createPeer(true);
      const offer = await peerConnection.createOffer();
      await peerConnection.setLocalDescription(offer);
      socket.send(JSON.stringify({ type: "offer", offer }));
      setRoomState(prev => ({
        ...prev,
        isConnected: true
      }));
    } catch (error) {
      setRoomState(prev => ({
        ...prev,
        hasError: true,
        errorMessage: 'Lỗi kết nối: ' + error.message
      }));
      toast.error('Lỗi kết nối: ' + error.message);
    }
  };

  return (
    <div style={{ display: "flex", flexDirection: "column", padding: "20px" }}>
      {/* Header */}
      <div style={{ marginBottom: "20px" }}>
        <h2>Phòng {roomId}</h2>
        {roomState.hasError && (
          <div style={{ color: "red", marginBottom: "10px" }}>
            {roomState.errorMessage}
          </div>
        )}
        {!roomState.isConnected && !roomState.hasError && (
          <div style={{ color: "#666", marginBottom: "10px" }}>
            Đang kết nối...
          </div>
        )}
      </div>

      {/* Video Grid */}
      <div style={{ display: "flex", gap: "20px" }}>
        <div>
          <h3>Local</h3>
          <video 
            ref={localVideo} 
            autoPlay 
            playsInline 
            muted 
            width={320} 
            height={240}
            style={{
              border: roomState.isLocalStreamReady ? '1px solid #ccc' : '1px solid #f00',
              borderRadius: '8px'
            }}
          />
        </div>
        <div>
          <h3>Remote</h3>
          <video 
            ref={remoteVideo} 
            autoPlay 
            playsInline 
            width={320} 
            height={240}
            style={{
              border: roomState.isRemoteStreamReady ? '1px solid #ccc' : '1px solid #f00',
              borderRadius: '8px'
            }}
          />
        </div>
      </div>

      {/* Controls */}
      <div style={{ marginTop: "20px", display: "flex", gap: "10px" }}>
        <button
          onClick={() => {
            if (localStream.current) {
              localStream.current.getTracks().forEach(track => track.stop());
            }
            if (peerConnection) {
              peerConnection.close();
            }
            if (socket) {
              socket.close();
            }
            useRouter().push('/');
          }}
          style={{
            padding: "8px 16px",
            backgroundColor: "#dc3545",
            color: "white",
            border: "none",
            borderRadius: "4px",
            cursor: "pointer"
          }}
        >
          End Call
        </button>
      </div>
    </div>
  );
}
